AWSTemplateFormatVersion: 2010-09-09
Description: >
  Latte legends ETL pipeline setup

Parameters:
  TeamName:
    Type: String
    Description: Enter the team name you want to make resources for
    Default: 'latte-legends'
  NetworkStackName:
    Type: String
    Default: project-networking
    Description: Network stack with VPC containing Redshift instance
  EC2InstanceProfileRoleName:
    Type: String
    Default: 'latte-legends Web Server'
    Description: Role to associate with EC2 instance profile
  EC2InstanceKeyName:
    Type: String
    Description: Key pair associated with the EC2 instance
    Default: latte-legends-key
  EC2InstanceSSHIngressIp:
    Type: String
    Description: Custom IP address for SSH ingress rule
    Default: ""
  EC2UserData:
    Type: String
    Description: User data script to run on EC2 server boot

Resources:
  EtlLambdaFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Sub '${TeamName}-function-etl-lambda'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::339713081862:role/lambda-execution-role'
      Timeout: 900
      ReservedConcurrentExecutions: 10
      Code:
        S3Bucket: !Sub '${TeamName}-lambda-code-bucket'
        S3Key: !Sub '${TeamName}-lambda-code.zip'
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub '${NetworkStackName}-VPCSGID'
        SubnetIds:
          - Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivateSubnet0ID'
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-etl-lambda'
      Environment:
        Variables:
          SSM_PARAMETER_NAME:
            Fn::Join:
            - '_'
            - Fn::Split:
              - '-'
              - !Sub '${TeamName}_redshift_settings'

  RawDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
      - RawDataBucketPermission
      - EtlLambdaFunction
    Properties:
      BucketName: !Sub '${TeamName}-raw-data'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EtlLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-raw-data'

  RawDataBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EtlLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${TeamName}-raw-data'

  RawDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RawDataBucket
      PolicyDocument:
        Statement:
          - Sid: "AllowSSLRequestsOnly"
            Action: "s3:*"
            Principal: "*"
            Effect: "Deny"
            Resource:
              - !Sub "arn:aws:s3:::${TeamName}-raw-data"
              - !Sub "arn:aws:s3:::${TeamName}-raw-data/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  CleanedDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
      - CleanedDataBucketPermission
      - EtlLambdaFunction
    Properties:
      BucketName: !Sub '${TeamName}-cleaned-data'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EtlLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-cleaned-data'

  CleanedDataBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EtlLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${TeamName}-cleaned-data'

  CleanedDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CleanedDataBucket
      PolicyDocument:
        Statement:
          - Sid: "AllowSSLRequestsOnly"
            Action: "s3:*"
            Principal: "*"
            Effect: "Deny"
            Resource:
              - !Sub "arn:aws:s3:::${TeamName}-cleaned-data"
              - !Sub "arn:aws:s3:::${TeamName}-cleaned-data/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  ArchiveDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
      - ArchiveDataBucketPermission
      - EtlLambdaFunction
    Properties:
      BucketName: !Sub '${TeamName}-archive-data'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt EtlLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-archive-data'

  ArchiveDataBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EtlLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${TeamName}-archive-data'

  ArchiveDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArchiveDataBucket
      PolicyDocument:
        Statement:
          - Sid: "AllowSSLRequestsOnly"
            Action: "s3:*"
            Principal: "*"
            Effect: "Deny"
            Resource:
              - !Sub "arn:aws:s3:::${TeamName}-archive-data"
              - !Sub "arn:aws:s3:::${TeamName}-archive-data/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  Ec2Instance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Retain
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref EC2InstanceKeyName
      ImageId: ami-0db188056a6ff81ae
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 8
            Encrypted: true
            DeleteOnTermination: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PublicSubnet0ID'
          GroupSet:
            - Fn::ImportValue: !Sub '${NetworkStackName}-VPCSGID'
            - Fn::GetAtt: EC2InstanceSecurityGroup.GroupId
      IamInstanceProfile: !Sub '${EC2InstanceProfileRoleName}'
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-ec2-grafana'
      UserData: !Ref EC2UserData

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Retain
    Properties:
      GroupDescription: Sets ingress and egress rules for HTTP, HTTPS, and SSH
      Tags:
        - Key: Name
          Value: !Sub '${TeamName}-ec2-grafana'
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub '${EC2InstanceSSHIngressIp}/32'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
